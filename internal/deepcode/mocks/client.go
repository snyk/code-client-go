// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	deepcode "github.com/snyk/code-client-go/internal/deepcode"
)

// MockDeepcode is a mock of DeepcodeClient interface.
type MockDeepcode struct {
	ctrl     *gomock.Controller
	recorder *MockDeepcodeMockRecorder
}

// MockDeepcodeMockRecorder is the mock recorder for MockDeepcode.
type MockDeepcodeMockRecorder struct {
	mock *MockDeepcode
}

// NewMockDeepcode creates a new mock instance.
func NewMockDeepcode(ctrl *gomock.Controller) *MockDeepcode {
	mock := &MockDeepcode{ctrl: ctrl}
	mock.recorder = &MockDeepcodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeepcode) EXPECT() *MockDeepcodeMockRecorder {
	return m.recorder
}

// CreateBundle mocks base method.
func (m *MockDeepcode) CreateBundle(ctx context.Context, files map[string]string) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBundle", ctx, files)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBundle indicates an expected call of CreateBundle.
func (mr *MockDeepcodeMockRecorder) CreateBundle(ctx, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBundle", reflect.TypeOf((*MockDeepcode)(nil).CreateBundle), ctx, files)
}

// ExtendBundle mocks base method.
func (m *MockDeepcode) ExtendBundle(ctx context.Context, bundleHash string, files map[string]deepcode.BundleFile, removedFiles []string) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendBundle", ctx, bundleHash, files, removedFiles)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExtendBundle indicates an expected call of ExtendBundle.
func (mr *MockDeepcodeMockRecorder) ExtendBundle(ctx, bundleHash, files, removedFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendBundle", reflect.TypeOf((*MockDeepcode)(nil).ExtendBundle), ctx, bundleHash, files, removedFiles)
}

// GetFilters mocks base method.
func (m *MockDeepcode) GetFilters(ctx context.Context) (deepcode.FiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilters", ctx)
	ret0, _ := ret[0].(deepcode.FiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilters indicates an expected call of GetFilters.
func (mr *MockDeepcodeMockRecorder) GetFilters(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilters", reflect.TypeOf((*MockDeepcode)(nil).GetFilters), ctx)
}
