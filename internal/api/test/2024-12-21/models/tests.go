// Package v20241221 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v20241221

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/snyk/code-client-go/internal/api/test/2024-12-21/common"
)

// Defines values for CreateTestRequestBodyDataType.
const (
	CreateTestRequestBodyDataTypeTest CreateTestRequestBodyDataType = "test"
)

// Defines values for Flow.
const (
	ApiMonitor    Flow = "api_monitor"
	ApiTest       Flow = "api_test"
	CliTest       Flow = "cli_test"
	IdeDiffTest   Flow = "ide_diff_test"
	IdeTest       Flow = "ide_test"
	ManualTest    Flow = "manual_test"
	Monitor       Flow = "monitor"
	PrCheck       Flow = "pr_check"
	RecurringTest Flow = "recurring_test"
	SbomMonitor   Flow = "sbom_monitor"
	SbomTest      Flow = "sbom_test"
)

// Defines values for PostTestRequestDataType.
const (
	PostTestRequestDataTypeTest PostTestRequestDataType = "test"
)

// Defines values for Scan.
const (
	CodeSecurity            Scan = "code_security"
	CodeSecurityCodeQuality Scan = "code_security, code_quality"
)

// Defines values for TestAcceptedStateStatus.
const (
	TestAcceptedStateStatusAccepted TestAcceptedStateStatus = "accepted"
)

// Defines values for TestCompletedStateResultsOutcomeResult.
const (
	TestCompletedStateResultsOutcomeResultFailed TestCompletedStateResultsOutcomeResult = "failed"
	TestCompletedStateResultsOutcomeResultPassed TestCompletedStateResultsOutcomeResult = "passed"
)

// Defines values for TestCompletedStateStatus.
const (
	TestCompletedStateStatusCompleted TestCompletedStateStatus = "completed"
)

// Defines values for TestErrorStateStatus.
const (
	TestErrorStateStatusError TestErrorStateStatus = "error"
)

// Defines values for TestInProgressStateStatus.
const (
	TestInProgressStateStatusInProgress TestInProgressStateStatus = "in_progress"
)

// Defines values for TestInputBundleType.
const (
	Bundle TestInputBundleType = "bundle"
)

// Defines values for TestInputLegacyScmProjectType.
const (
	LegacyScmProject TestInputLegacyScmProjectType = "legacy_scm_project"
)

// Defines values for TestResponseDataType.
const (
	TestResponseDataTypeTest TestResponseDataType = "test"
)

// Defines values for TestResultDataType.
const (
	TestResultDataTypeTest TestResultDataType = "test"
)

// Defines values for TestResultAcceptedStateState.
const (
	TestResultAcceptedStateStateAccepted TestResultAcceptedStateState = "accepted"
)

// Defines values for TestResultCompletedStateFindingsFormat.
const (
	CYCLONEDX TestResultCompletedStateFindingsFormat = "CYCLONE_DX"
	SARIF     TestResultCompletedStateFindingsFormat = "SARIF"
)

// Defines values for TestResultCompletedStateResultStatus.
const (
	TestResultCompletedStateResultStatusFailed TestResultCompletedStateResultStatus = "failed"
	TestResultCompletedStateResultStatusPassed TestResultCompletedStateResultStatus = "passed"
)

// Defines values for TestResultCompletedStateState.
const (
	TestResultCompletedStateStateCompleted TestResultCompletedStateState = "completed"
)

// Defines values for TestResultErrorStateState.
const (
	TestResultErrorStateStateError TestResultErrorStateState = "error"
)

// Defines values for TestResultInProgressStateState.
const (
	TestResultInProgressStateStateInProgress TestResultInProgressStateState = "in_progress"
)

// Defines values for TestResultResponseDataType.
const (
	Test TestResultResponseDataType = "test"
)

// CreateTestRequestBody defines model for CreateTestRequestBody.
type CreateTestRequestBody struct {
	Data struct {
		Attributes struct {
			Configuration struct {
				Output *struct {
					// Label Arbitrary value up to the user
					Label       *string             `json:"label,omitempty"`
					ProjectId   *openapi_types.UUID `json:"project_id,omitempty"`
					ProjectName *string             `json:"project_name,omitempty"`

					// Report Determines if the test is stateless (false) or stateful (true)
					Report     *bool   `json:"report,omitempty"`
					TargetName *string `json:"target_name,omitempty"`

					// TargetReference A reference for the target's version - can be a git branch or a commit sha
					TargetReference *string `json:"target_reference,omitempty"`
				} `json:"output,omitempty"`
				Scan struct {
					ResultType *Scan `json:"result_type,omitempty"`
				} `json:"scan"`
			} `json:"configuration"`
			Input CreateTestRequestBody_Data_Attributes_Input `json:"input"`
		} `json:"attributes"`
		Type CreateTestRequestBodyDataType `json:"type"`
	} `json:"data"`
}

// CreateTestRequestBody_Data_Attributes_Input defines model for CreateTestRequestBody.Data.Attributes.Input.
type CreateTestRequestBody_Data_Attributes_Input struct {
	union json.RawMessage
}

// CreateTestRequestBodyDataType defines model for CreateTestRequestBody.Data.Type.
type CreateTestRequestBodyDataType string

// Flow defines model for Flow.
type Flow string

// PostTestRequest defines model for PostTestRequest.
type PostTestRequest struct {
	Data struct {
		Attributes struct {
			Context *PostTestRequest_Data_Attributes_Context `json:"context,omitempty"`
			Options PostTestRequest_Data_Attributes_Options  `json:"options"`
		} `json:"attributes"`
		Type PostTestRequestDataType `json:"type"`
	} `json:"data"`
}

// PostTestRequest_Data_Attributes_Context defines model for PostTestRequest.Data.Attributes.Context.
type PostTestRequest_Data_Attributes_Context struct {
	Flow                 *Flow                  `json:"flow,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostTestRequest_Data_Attributes_Options defines model for PostTestRequest.Data.Attributes.Options.
type PostTestRequest_Data_Attributes_Options struct {
	union json.RawMessage
}

// PostTestRequestDataType defines model for PostTestRequest.Data.Type.
type PostTestRequestDataType string

// Scan defines model for Scan.
type Scan string

// TestAcceptedState defines model for TestAcceptedState.
type TestAcceptedState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time               `json:"created_at"`
	Status    TestAcceptedStateStatus `json:"status"`
}

// TestAcceptedStateStatus defines model for TestAcceptedState.Status.
type TestAcceptedStateStatus string

// TestCompletedState defines model for TestCompletedState.
type TestCompletedState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time `json:"created_at"`
	Documents struct {
		// EnrichedSarif The location to use for fetching the enriched sarif results
		EnrichedSarif string `json:"enriched_sarif"`
	} `json:"documents"`
	Results struct {
		Outcome struct {
			// Result The outcome of the test. passed - the test completed and passed policy gate, failed - the test completed and failed policy gate
			Result TestCompletedStateResultsOutcomeResult `json:"result"`
		} `json:"outcome"`
		Webui *struct {
			// Link Link to the asset created in the Snyk web UI
			Link *string `json:"link,omitempty"`

			// ProjectId The ID of the created project in the Snyk web UI
			ProjectId *openapi_types.UUID `json:"project_id,omitempty"`

			// SnapshotId The ID of the created snapshot in the Snyk web UI
			SnapshotId *openapi_types.UUID `json:"snapshot_id,omitempty"`
		} `json:"webui,omitempty"`
	} `json:"results"`
	Status TestCompletedStateStatus `json:"status"`
}

// TestCompletedStateResultsOutcomeResult The outcome of the test. passed - the test completed and passed policy gate, failed - the test completed and failed policy gate
type TestCompletedStateResultsOutcomeResult string

// TestCompletedStateStatus defines model for TestCompletedState.Status.
type TestCompletedStateStatus string

// TestCoordinates defines model for TestCoordinates.
type TestCoordinates struct {
	union json.RawMessage
}

// TestErrorState defines model for TestErrorState.
type TestErrorState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time `json:"created_at"`
	Errors    *[]struct {
		// Classification A type of error
		Classification string `json:"classification"`

		// ErrorCode The Snyk error code
		ErrorCode string `json:"error_code"`

		// InfoUrl The URL to link to more information about the error
		InfoUrl *string `json:"info_url,omitempty"`

		// Message A custom description of an error.
		Message string `json:"message"`

		// Title The high-level description of an error catalog error
		Title string `json:"title"`
	} `json:"errors,omitempty"`
	Status TestErrorStateStatus `json:"status"`
}

// TestErrorStateStatus defines model for TestErrorState.Status.
type TestErrorStateStatus string

// TestInProgressState defines model for TestInProgressState.
type TestInProgressState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time                 `json:"created_at"`
	Status    TestInProgressStateStatus `json:"status"`
}

// TestInProgressStateStatus defines model for TestInProgressState.Status.
type TestInProgressStateStatus string

// TestInputBundle defines model for TestInputBundle.
type TestInputBundle struct {
	// BundleId A Snyk bundle id
	BundleId string `json:"bundle_id"`

	// Metadata Metadata of the input to be tested
	Metadata struct {
		// LimitTestToFiles The findings will be limited to a subset of files only.
		LimitTestToFiles *[]string `json:"limit_test_to_files,omitempty"`

		// LocalFilePath This can be a file path or a folder id for IDE
		LocalFilePath string  `json:"local_file_path"`
		RepoUrl       *string `json:"repo_url,omitempty"`
	} `json:"metadata"`
	Type TestInputBundleType `json:"type"`
}

// TestInputBundleType defines model for TestInputBundle.Type.
type TestInputBundleType string

// TestInputLegacyScmProject defines model for TestInputLegacyScmProject.
type TestInputLegacyScmProject struct {
	// CommitId SHA of the commit to be tested
	CommitId string `json:"commit_id"`

	// ProjectId Id of the project to be tested
	ProjectId openapi_types.UUID            `json:"project_id"`
	Type      TestInputLegacyScmProjectType `json:"type"`
}

// TestInputLegacyScmProjectType defines model for TestInputLegacyScmProject.Type.
type TestInputLegacyScmProjectType string

// TestOptionsDiff defines model for TestOptionsDiff.
type TestOptionsDiff struct {
	Base TestCoordinates `json:"base"`
	Head TestCoordinates `json:"head"`
}

// TestOptionsGitUrl defines model for TestOptionsGitUrl.
type TestOptionsGitUrl struct {
	// IntegrationId A Snyk integration_id
	IntegrationId openapi_types.UUID `json:"integration_id"`

	// RepoUrl A repository url for which a test will run
	RepoUrl string `json:"repo_url"`

	// Revision A git commit revision
	Revision string `json:"revision"`
}

// TestOptionsTarget defines model for TestOptionsTarget.
type TestOptionsTarget struct {
	// TargetId Id of the target to be tested
	TargetId openapi_types.UUID `json:"target_id"`

	// Version This target's version, like a git branch, a commit sha, or a Docker image tag
	Version string `json:"version"`
}

// TestOptionsWorkspace defines model for TestOptionsWorkspace.
type TestOptionsWorkspace struct {
	// WorkspaceId Id of the workspace to be tested
	WorkspaceId openapi_types.UUID `json:"workspace_id"`
}

// TestResponse defines model for TestResponse.
type TestResponse struct {
	Data struct {
		// Id The id of the Snyk test
		Id   openapi_types.UUID   `json:"id"`
		Type TestResponseDataType `json:"type"`
	} `json:"data"`
	Jsonapi *externalRef0.JsonApi `json:"jsonapi,omitempty"`
	Links   externalRef0.SelfLink `json:"links"`
}

// TestResponseDataType defines model for TestResponse.Data.Type.
type TestResponseDataType string

// TestResult defines model for TestResult.
type TestResult struct {
	Data struct {
		Attributes TestState `json:"attributes"`

		// Id The id of the test
		Id   openapi_types.UUID `json:"id"`
		Type TestResultDataType `json:"type"`
	} `json:"data"`
	Jsonapi externalRef0.JsonApi  `json:"jsonapi"`
	Links   externalRef0.SelfLink `json:"links"`
}

// TestResultDataType defines model for TestResult.Data.Type.
type TestResultDataType string

// TestResultAcceptedState defines model for TestResultAcceptedState.
type TestResultAcceptedState struct {
	Context *map[string]interface{} `json:"context,omitempty"`

	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time                    `json:"created_at"`
	State     TestResultAcceptedStateState `json:"state"`
}

// TestResultAcceptedStateState defines model for TestResultAcceptedState.State.
type TestResultAcceptedStateState string

// TestResultCompletedState defines model for TestResultCompletedState.
type TestResultCompletedState struct {
	Context *map[string]interface{} `json:"context,omitempty"`

	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time `json:"created_at"`
	Findings  []struct {
		// FindingsUrl URL where findings can be downloaded
		FindingsUrl string `json:"findings_url"`

		// Format The format of the findings document
		Format TestResultCompletedStateFindingsFormat `json:"format"`
	} `json:"findings"`
	Result *struct {
		// Status The outcome of the test. passed - the test completed and passed policy gate, failed - the test completed and failed policy gate
		Status TestResultCompletedStateResultStatus `json:"status"`
	} `json:"result,omitempty"`

	// SeverityCounts Severity counts for the findings
	SeverityCounts struct {
		Critical *int `json:"critical,omitempty"`
		High     *int `json:"high,omitempty"`
		Low      *int `json:"low,omitempty"`
		Medium   *int `json:"medium,omitempty"`
	} `json:"severity_counts"`
	State TestResultCompletedStateState `json:"state"`
}

// TestResultCompletedStateFindingsFormat The format of the findings document
type TestResultCompletedStateFindingsFormat string

// TestResultCompletedStateResultStatus The outcome of the test. passed - the test completed and passed policy gate, failed - the test completed and failed policy gate
type TestResultCompletedStateResultStatus string

// TestResultCompletedStateState defines model for TestResultCompletedState.State.
type TestResultCompletedStateState string

// TestResultErrorState defines model for TestResultErrorState.
type TestResultErrorState struct {
	Context *map[string]interface{} `json:"context,omitempty"`

	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time `json:"created_at"`
	Errors    *[]struct {
		// Classification A type of error
		Classification string `json:"classification"`

		// ErrorCode The Snyk error code
		ErrorCode string `json:"error_code"`

		// InfoUrl The URL to link to more information about the error
		InfoUrl *string `json:"info_url,omitempty"`

		// Message A custom description of an error.
		Message string `json:"message"`

		// Title The high-level description of an error catalog error
		Title string `json:"title"`
	} `json:"errors,omitempty"`
	State TestResultErrorStateState `json:"state"`
}

// TestResultErrorStateState defines model for TestResultErrorState.State.
type TestResultErrorStateState string

// TestResultInProgressState defines model for TestResultInProgressState.
type TestResultInProgressState struct {
	Context *map[string]interface{} `json:"context,omitempty"`

	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time                      `json:"created_at"`
	State     TestResultInProgressStateState `json:"state"`
}

// TestResultInProgressStateState defines model for TestResultInProgressState.State.
type TestResultInProgressStateState string

// TestResultResponse defines model for TestResultResponse.
type TestResultResponse struct {
	Data struct {
		Attributes TestResultState `json:"attributes"`

		// Id The id of the test
		Id   openapi_types.UUID         `json:"id"`
		Type TestResultResponseDataType `json:"type"`
	} `json:"data"`
	Jsonapi externalRef0.JsonApi  `json:"jsonapi"`
	Links   externalRef0.SelfLink `json:"links"`
}

// TestResultResponseDataType defines model for TestResultResponse.Data.Type.
type TestResultResponseDataType string

// TestResultState defines model for TestResultState.
type TestResultState struct {
	union json.RawMessage
}

// TestState defines model for TestState.
type TestState struct {
	union json.RawMessage
}

// Getter for additional properties for PostTestRequest_Data_Attributes_Context. Returns the specified
// element and whether it was found
func (a PostTestRequest_Data_Attributes_Context) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PostTestRequest_Data_Attributes_Context
func (a *PostTestRequest_Data_Attributes_Context) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PostTestRequest_Data_Attributes_Context to handle AdditionalProperties
func (a *PostTestRequest_Data_Attributes_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["flow"]; found {
		err = json.Unmarshal(raw, &a.Flow)
		if err != nil {
			return fmt.Errorf("error reading 'flow': %w", err)
		}
		delete(object, "flow")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PostTestRequest_Data_Attributes_Context to handle AdditionalProperties
func (a PostTestRequest_Data_Attributes_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Flow != nil {
		object["flow"], err = json.Marshal(a.Flow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flow': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsTestInputBundle returns the union data inside the CreateTestRequestBody_Data_Attributes_Input as a TestInputBundle
func (t CreateTestRequestBody_Data_Attributes_Input) AsTestInputBundle() (TestInputBundle, error) {
	var body TestInputBundle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputBundle overwrites any union data inside the CreateTestRequestBody_Data_Attributes_Input as the provided TestInputBundle
func (t *CreateTestRequestBody_Data_Attributes_Input) FromTestInputBundle(v TestInputBundle) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputBundle performs a merge with any union data inside the CreateTestRequestBody_Data_Attributes_Input, using the provided TestInputBundle
func (t *CreateTestRequestBody_Data_Attributes_Input) MergeTestInputBundle(v TestInputBundle) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputLegacyScmProject returns the union data inside the CreateTestRequestBody_Data_Attributes_Input as a TestInputLegacyScmProject
func (t CreateTestRequestBody_Data_Attributes_Input) AsTestInputLegacyScmProject() (TestInputLegacyScmProject, error) {
	var body TestInputLegacyScmProject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputLegacyScmProject overwrites any union data inside the CreateTestRequestBody_Data_Attributes_Input as the provided TestInputLegacyScmProject
func (t *CreateTestRequestBody_Data_Attributes_Input) FromTestInputLegacyScmProject(v TestInputLegacyScmProject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputLegacyScmProject performs a merge with any union data inside the CreateTestRequestBody_Data_Attributes_Input, using the provided TestInputLegacyScmProject
func (t *CreateTestRequestBody_Data_Attributes_Input) MergeTestInputLegacyScmProject(v TestInputLegacyScmProject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateTestRequestBody_Data_Attributes_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateTestRequestBody_Data_Attributes_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTestOptionsTarget returns the union data inside the PostTestRequest_Data_Attributes_Options as a TestOptionsTarget
func (t PostTestRequest_Data_Attributes_Options) AsTestOptionsTarget() (TestOptionsTarget, error) {
	var body TestOptionsTarget
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestOptionsTarget overwrites any union data inside the PostTestRequest_Data_Attributes_Options as the provided TestOptionsTarget
func (t *PostTestRequest_Data_Attributes_Options) FromTestOptionsTarget(v TestOptionsTarget) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestOptionsTarget performs a merge with any union data inside the PostTestRequest_Data_Attributes_Options, using the provided TestOptionsTarget
func (t *PostTestRequest_Data_Attributes_Options) MergeTestOptionsTarget(v TestOptionsTarget) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestOptionsGitUrl returns the union data inside the PostTestRequest_Data_Attributes_Options as a TestOptionsGitUrl
func (t PostTestRequest_Data_Attributes_Options) AsTestOptionsGitUrl() (TestOptionsGitUrl, error) {
	var body TestOptionsGitUrl
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestOptionsGitUrl overwrites any union data inside the PostTestRequest_Data_Attributes_Options as the provided TestOptionsGitUrl
func (t *PostTestRequest_Data_Attributes_Options) FromTestOptionsGitUrl(v TestOptionsGitUrl) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestOptionsGitUrl performs a merge with any union data inside the PostTestRequest_Data_Attributes_Options, using the provided TestOptionsGitUrl
func (t *PostTestRequest_Data_Attributes_Options) MergeTestOptionsGitUrl(v TestOptionsGitUrl) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestOptionsDiff returns the union data inside the PostTestRequest_Data_Attributes_Options as a TestOptionsDiff
func (t PostTestRequest_Data_Attributes_Options) AsTestOptionsDiff() (TestOptionsDiff, error) {
	var body TestOptionsDiff
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestOptionsDiff overwrites any union data inside the PostTestRequest_Data_Attributes_Options as the provided TestOptionsDiff
func (t *PostTestRequest_Data_Attributes_Options) FromTestOptionsDiff(v TestOptionsDiff) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestOptionsDiff performs a merge with any union data inside the PostTestRequest_Data_Attributes_Options, using the provided TestOptionsDiff
func (t *PostTestRequest_Data_Attributes_Options) MergeTestOptionsDiff(v TestOptionsDiff) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestOptionsWorkspace returns the union data inside the PostTestRequest_Data_Attributes_Options as a TestOptionsWorkspace
func (t PostTestRequest_Data_Attributes_Options) AsTestOptionsWorkspace() (TestOptionsWorkspace, error) {
	var body TestOptionsWorkspace
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestOptionsWorkspace overwrites any union data inside the PostTestRequest_Data_Attributes_Options as the provided TestOptionsWorkspace
func (t *PostTestRequest_Data_Attributes_Options) FromTestOptionsWorkspace(v TestOptionsWorkspace) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestOptionsWorkspace performs a merge with any union data inside the PostTestRequest_Data_Attributes_Options, using the provided TestOptionsWorkspace
func (t *PostTestRequest_Data_Attributes_Options) MergeTestOptionsWorkspace(v TestOptionsWorkspace) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostTestRequest_Data_Attributes_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostTestRequest_Data_Attributes_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTestOptionsGitUrl returns the union data inside the TestCoordinates as a TestOptionsGitUrl
func (t TestCoordinates) AsTestOptionsGitUrl() (TestOptionsGitUrl, error) {
	var body TestOptionsGitUrl
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestOptionsGitUrl overwrites any union data inside the TestCoordinates as the provided TestOptionsGitUrl
func (t *TestCoordinates) FromTestOptionsGitUrl(v TestOptionsGitUrl) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestOptionsGitUrl performs a merge with any union data inside the TestCoordinates, using the provided TestOptionsGitUrl
func (t *TestCoordinates) MergeTestOptionsGitUrl(v TestOptionsGitUrl) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestOptionsTarget returns the union data inside the TestCoordinates as a TestOptionsTarget
func (t TestCoordinates) AsTestOptionsTarget() (TestOptionsTarget, error) {
	var body TestOptionsTarget
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestOptionsTarget overwrites any union data inside the TestCoordinates as the provided TestOptionsTarget
func (t *TestCoordinates) FromTestOptionsTarget(v TestOptionsTarget) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestOptionsTarget performs a merge with any union data inside the TestCoordinates, using the provided TestOptionsTarget
func (t *TestCoordinates) MergeTestOptionsTarget(v TestOptionsTarget) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestOptionsWorkspace returns the union data inside the TestCoordinates as a TestOptionsWorkspace
func (t TestCoordinates) AsTestOptionsWorkspace() (TestOptionsWorkspace, error) {
	var body TestOptionsWorkspace
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestOptionsWorkspace overwrites any union data inside the TestCoordinates as the provided TestOptionsWorkspace
func (t *TestCoordinates) FromTestOptionsWorkspace(v TestOptionsWorkspace) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestOptionsWorkspace performs a merge with any union data inside the TestCoordinates, using the provided TestOptionsWorkspace
func (t *TestCoordinates) MergeTestOptionsWorkspace(v TestOptionsWorkspace) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TestCoordinates) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TestCoordinates) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTestResultAcceptedState returns the union data inside the TestResultState as a TestResultAcceptedState
func (t TestResultState) AsTestResultAcceptedState() (TestResultAcceptedState, error) {
	var body TestResultAcceptedState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestResultAcceptedState overwrites any union data inside the TestResultState as the provided TestResultAcceptedState
func (t *TestResultState) FromTestResultAcceptedState(v TestResultAcceptedState) error {
	v.State = "TestResultAcceptedState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestResultAcceptedState performs a merge with any union data inside the TestResultState, using the provided TestResultAcceptedState
func (t *TestResultState) MergeTestResultAcceptedState(v TestResultAcceptedState) error {
	v.State = "TestResultAcceptedState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestResultInProgressState returns the union data inside the TestResultState as a TestResultInProgressState
func (t TestResultState) AsTestResultInProgressState() (TestResultInProgressState, error) {
	var body TestResultInProgressState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestResultInProgressState overwrites any union data inside the TestResultState as the provided TestResultInProgressState
func (t *TestResultState) FromTestResultInProgressState(v TestResultInProgressState) error {
	v.State = "TestResultInProgressState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestResultInProgressState performs a merge with any union data inside the TestResultState, using the provided TestResultInProgressState
func (t *TestResultState) MergeTestResultInProgressState(v TestResultInProgressState) error {
	v.State = "TestResultInProgressState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestResultCompletedState returns the union data inside the TestResultState as a TestResultCompletedState
func (t TestResultState) AsTestResultCompletedState() (TestResultCompletedState, error) {
	var body TestResultCompletedState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestResultCompletedState overwrites any union data inside the TestResultState as the provided TestResultCompletedState
func (t *TestResultState) FromTestResultCompletedState(v TestResultCompletedState) error {
	v.State = "TestResultCompletedState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestResultCompletedState performs a merge with any union data inside the TestResultState, using the provided TestResultCompletedState
func (t *TestResultState) MergeTestResultCompletedState(v TestResultCompletedState) error {
	v.State = "TestResultCompletedState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestResultErrorState returns the union data inside the TestResultState as a TestResultErrorState
func (t TestResultState) AsTestResultErrorState() (TestResultErrorState, error) {
	var body TestResultErrorState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestResultErrorState overwrites any union data inside the TestResultState as the provided TestResultErrorState
func (t *TestResultState) FromTestResultErrorState(v TestResultErrorState) error {
	v.State = "TestResultErrorState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestResultErrorState performs a merge with any union data inside the TestResultState, using the provided TestResultErrorState
func (t *TestResultState) MergeTestResultErrorState(v TestResultErrorState) error {
	v.State = "TestResultErrorState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TestResultState) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"state"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TestResultState) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "TestResultAcceptedState":
		return t.AsTestResultAcceptedState()
	case "TestResultCompletedState":
		return t.AsTestResultCompletedState()
	case "TestResultErrorState":
		return t.AsTestResultErrorState()
	case "TestResultInProgressState":
		return t.AsTestResultInProgressState()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TestResultState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TestResultState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTestAcceptedState returns the union data inside the TestState as a TestAcceptedState
func (t TestState) AsTestAcceptedState() (TestAcceptedState, error) {
	var body TestAcceptedState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestAcceptedState overwrites any union data inside the TestState as the provided TestAcceptedState
func (t *TestState) FromTestAcceptedState(v TestAcceptedState) error {
	v.Status = "TestAcceptedState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestAcceptedState performs a merge with any union data inside the TestState, using the provided TestAcceptedState
func (t *TestState) MergeTestAcceptedState(v TestAcceptedState) error {
	v.Status = "TestAcceptedState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInProgressState returns the union data inside the TestState as a TestInProgressState
func (t TestState) AsTestInProgressState() (TestInProgressState, error) {
	var body TestInProgressState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInProgressState overwrites any union data inside the TestState as the provided TestInProgressState
func (t *TestState) FromTestInProgressState(v TestInProgressState) error {
	v.Status = "TestInProgressState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInProgressState performs a merge with any union data inside the TestState, using the provided TestInProgressState
func (t *TestState) MergeTestInProgressState(v TestInProgressState) error {
	v.Status = "TestInProgressState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestCompletedState returns the union data inside the TestState as a TestCompletedState
func (t TestState) AsTestCompletedState() (TestCompletedState, error) {
	var body TestCompletedState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestCompletedState overwrites any union data inside the TestState as the provided TestCompletedState
func (t *TestState) FromTestCompletedState(v TestCompletedState) error {
	v.Status = "TestCompletedState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestCompletedState performs a merge with any union data inside the TestState, using the provided TestCompletedState
func (t *TestState) MergeTestCompletedState(v TestCompletedState) error {
	v.Status = "TestCompletedState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestErrorState returns the union data inside the TestState as a TestErrorState
func (t TestState) AsTestErrorState() (TestErrorState, error) {
	var body TestErrorState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestErrorState overwrites any union data inside the TestState as the provided TestErrorState
func (t *TestState) FromTestErrorState(v TestErrorState) error {
	v.Status = "TestErrorState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestErrorState performs a merge with any union data inside the TestState, using the provided TestErrorState
func (t *TestState) MergeTestErrorState(v TestErrorState) error {
	v.Status = "TestErrorState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TestState) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TestState) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "TestAcceptedState":
		return t.AsTestAcceptedState()
	case "TestCompletedState":
		return t.AsTestCompletedState()
	case "TestErrorState":
		return t.AsTestErrorState()
	case "TestInProgressState":
		return t.AsTestInProgressState()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TestState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TestState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
