// Package v20250407 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v20250407

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/snyk/code-client-go/internal/api/test/2025-04-07/common"
)

// Defines values for CreateTestRequestBodyDataType.
const (
	CreateTestRequestBodyDataTypeTest CreateTestRequestBodyDataType = "test"
)

// Defines values for OutputConfigInitiator.
const (
	ApiTest       OutputConfigInitiator = "api_test"
	AutoImport    OutputConfigInitiator = "auto_import"
	CliTest       OutputConfigInitiator = "cli_test"
	IdeTest       OutputConfigInitiator = "ide_test"
	Import        OutputConfigInitiator = "import"
	ManualTest    OutputConfigInitiator = "manual_test"
	PrCheck       OutputConfigInitiator = "pr_check"
	RecurringTest OutputConfigInitiator = "recurring_test"
)

// Defines values for ResultType.
const (
	CodeSecurity            ResultType = "code_security"
	CodeSecurityCodeQuality ResultType = "code_security, code_quality"
)

// Defines values for ScanConfigScanners.
const (
	LegacyScanners ScanConfigScanners = "legacy_scanners"
	Sast           ScanConfigScanners = "sast"
	Sca            ScanConfigScanners = "sca"
)

// Defines values for TestAcceptedStateStatus.
const (
	Accepted TestAcceptedStateStatus = "accepted"
)

// Defines values for TestCompletedStateResult.
const (
	Failed TestCompletedStateResult = "failed"
	Passed TestCompletedStateResult = "passed"
)

// Defines values for TestCompletedStateStatus.
const (
	Completed TestCompletedStateStatus = "completed"
)

// Defines values for TestErrorStateStatus.
const (
	Error TestErrorStateStatus = "error"
)

// Defines values for TestInProgressStateStatus.
const (
	InProgress TestInProgressStateStatus = "in_progress"
)

// Defines values for TestInitialConfigurationResponseDataType.
const (
	TestInitialConfigurationResponseDataTypeTest TestInitialConfigurationResponseDataType = "test"
)

// Defines values for TestInputDiffTargetType.
const (
	DiffScmTarget TestInputDiffTargetType = "diff_scm_target"
)

// Defines values for TestInputGitUrlCoordinatesType.
const (
	GitUrlCoordinates TestInputGitUrlCoordinatesType = "git_url_coordinates"
)

// Defines values for TestInputLegacyScmProjectType.
const (
	LegacyScmProject TestInputLegacyScmProjectType = "legacy_scm_project"
)

// Defines values for TestInputSBOMBundleType.
const (
	SbomBundle TestInputSBOMBundleType = "sbom_bundle"
)

// Defines values for TestInputSBOMSourceBundlesType.
const (
	SbomSastBundles TestInputSBOMSourceBundlesType = "sbom_sast_bundles"
)

// Defines values for TestInputScmTargetType.
const (
	ScmTarget TestInputScmTargetType = "scm_target"
)

// Defines values for TestInputSourceBundleType.
const (
	SourceBundle TestInputSourceBundleType = "source_bundle"
)

// Defines values for TestInputTargetType.
const (
	Target TestInputTargetType = "target"
)

// Defines values for TestInputWorkspaceType.
const (
	Workspace TestInputWorkspaceType = "workspace"
)

// Defines values for TestResponseDataType.
const (
	TestResponseDataTypeTest TestResponseDataType = "test"
)

// Defines values for TestResultDataType.
const (
	TestResultDataTypeTest TestResultDataType = "test"
)

// CreateTestRequestBody defines model for CreateTestRequestBody.
type CreateTestRequestBody struct {
	Data struct {
		Attributes TestAttributes                `json:"attributes"`
		Type       CreateTestRequestBodyDataType `json:"type"`
	} `json:"data"`
}

// CreateTestRequestBodyDataType defines model for CreateTestRequestBody.Data.Type.
type CreateTestRequestBodyDataType string

// OutputConfig defines model for OutputConfig.
type OutputConfig struct {
	// Initiator The type of test flow or system that initiated the test
	Initiator *OutputConfigInitiator `json:"initiator,omitempty"`

	// Label Arbitrary value up to the user
	Label *string `json:"label,omitempty"`

	// Origin The source control management system or platform origin
	Origin      *string             `json:"origin,omitempty"`
	ProjectId   *openapi_types.UUID `json:"project_id,omitempty"`
	ProjectName *string             `json:"project_name,omitempty"`

	// Report Determines if the test is stateless (false) or stateful (true)
	Report     *bool   `json:"report,omitempty"`
	TargetName *string `json:"target_name,omitempty"`

	// TargetReference A reference for the target's version - can be a git branch or a commit sha
	TargetReference *string `json:"target_reference,omitempty"`
}

// OutputConfigInitiator The type of test flow or system that initiated the test
type OutputConfigInitiator string

// ResultType defines model for ResultType.
type ResultType string

// ScanConfig defines model for ScanConfig.
type ScanConfig struct {
	// ExclusionGlobs A list of file paths and directories to exclude from the workspace. If empty default exclusion globs apply, according to the coordinate type.
	ExclusionGlobs *[]string `json:"exclusion_globs,omitempty"`

	// LimitTestToFiles A list of file paths to use in the scan. If empty the whole target is tested.
	LimitTestToFiles *[]string             `json:"limit_test_to_files,omitempty"`
	ResultType       *ResultType           `json:"result_type,omitempty"`
	Scanners         *[]ScanConfigScanners `json:"scanners,omitempty"`
}

// ScanConfigScanners defines model for ScanConfig.Scanners.
type ScanConfigScanners string

// TestAcceptedState defines model for TestAcceptedState.
type TestAcceptedState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time               `json:"created_at"`
	Status    TestAcceptedStateStatus `json:"status"`
}

// TestAcceptedStateStatus defines model for TestAcceptedState.Status.
type TestAcceptedStateStatus string

// TestAttributes defines model for TestAttributes.
type TestAttributes struct {
	Configuration *TestConfiguration    `json:"configuration,omitempty"`
	Input         *TestAttributes_Input `json:"input,omitempty"`
}

// TestAttributes_Input defines model for TestAttributes.Input.
type TestAttributes_Input struct {
	union json.RawMessage
}

// TestCompletedState defines model for TestCompletedState.
type TestCompletedState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time `json:"created_at"`

	// Result The outcome of the test. This field is deprecated.
	// Deprecated:
	Result TestCompletedStateResult `json:"result"`
	Status TestCompletedStateStatus `json:"status"`
}

// TestCompletedStateResult The outcome of the test. This field is deprecated.
type TestCompletedStateResult string

// TestCompletedStateStatus defines model for TestCompletedState.Status.
type TestCompletedStateStatus string

// TestConfiguration defines model for TestConfiguration.
type TestConfiguration struct {
	Output *OutputConfig `json:"output,omitempty"`
	Scan   *ScanConfig   `json:"scan,omitempty"`
}

// TestErrorState defines model for TestErrorState.
type TestErrorState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time `json:"created_at"`
	Errors    *[]struct {
		// Classification A type of error
		Classification string `json:"classification"`

		// ErrorCode The Snyk error code
		ErrorCode string `json:"error_code"`

		// InfoUrl The URL to link to more information about the error
		InfoUrl *string `json:"info_url,omitempty"`

		// Message A custom description of an error.
		Message string `json:"message"`

		// Title The high-level description of an error catalog error
		Title string `json:"title"`
	} `json:"errors,omitempty"`
	Status TestErrorStateStatus `json:"status"`
}

// TestErrorStateStatus defines model for TestErrorState.Status.
type TestErrorStateStatus string

// TestInProgressState defines model for TestInProgressState.
type TestInProgressState struct {
	// CreatedAt Timestamp when the test was created
	CreatedAt time.Time                 `json:"created_at"`
	Status    TestInProgressStateStatus `json:"status"`
}

// TestInProgressStateStatus defines model for TestInProgressState.Status.
type TestInProgressStateStatus string

// TestInitialConfigurationResponse defines model for TestInitialConfigurationResponse.
type TestInitialConfigurationResponse struct {
	Data *struct {
		Attributes *TestAttributes                           `json:"attributes,omitempty"`
		Type       *TestInitialConfigurationResponseDataType `json:"type,omitempty"`
	} `json:"data,omitempty"`
	Jsonapi *externalRef0.JsonApi  `json:"jsonapi,omitempty"`
	Links   *externalRef0.SelfLink `json:"links,omitempty"`
}

// TestInitialConfigurationResponseDataType defines model for TestInitialConfigurationResponse.Data.Type.
type TestInitialConfigurationResponseDataType string

// TestInputDiffTarget defines model for TestInputDiffTarget.
type TestInputDiffTarget struct {
	// BaseVersion SHA of the last commit existing in base branch
	BaseVersion string `json:"base_version"`

	// HeadVersion SHA of the commit to be tested
	HeadVersion string `json:"head_version"`

	// TargetId Id of the target to be tested
	TargetId openapi_types.UUID      `json:"target_id"`
	Type     TestInputDiffTargetType `json:"type"`
}

// TestInputDiffTargetType defines model for TestInputDiffTarget.Type.
type TestInputDiffTargetType string

// TestInputGitUrlCoordinates defines model for TestInputGitUrlCoordinates.
type TestInputGitUrlCoordinates struct {
	// IntegrationId A Snyk integration id that has access to the repository.
	IntegrationId openapi_types.UUID `json:"integration_id"`

	// RepoUrl A repository url for which a test will run.
	RepoUrl string `json:"repo_url"`

	// Revision SHA of the commit to be tested.
	Revision string                         `json:"revision"`
	Type     TestInputGitUrlCoordinatesType `json:"type"`
}

// TestInputGitUrlCoordinatesType defines model for TestInputGitUrlCoordinates.Type.
type TestInputGitUrlCoordinatesType string

// TestInputLegacyScmProject defines model for TestInputLegacyScmProject.
type TestInputLegacyScmProject struct {
	// CommitId SHA of the commit to be tested
	CommitId string `json:"commit_id"`

	// ProjectId Id of the project to be tested
	ProjectId openapi_types.UUID            `json:"project_id"`
	Type      TestInputLegacyScmProjectType `json:"type"`
}

// TestInputLegacyScmProjectType defines model for TestInputLegacyScmProject.Type.
type TestInputLegacyScmProjectType string

// TestInputSBOMBundle defines model for TestInputSBOMBundle.
type TestInputSBOMBundle struct {
	// BundleId Bundle id of the SBOM bundle
	BundleId string `json:"bundle_id"`

	// Metadata Metadata of the SBOM bundle
	Metadata struct {
		// LocalFilePath SBOM file path
		LocalFilePath string `json:"local_file_path"`
	} `json:"metadata"`
	Type TestInputSBOMBundleType `json:"type"`
}

// TestInputSBOMBundleType defines model for TestInputSBOMBundle.Type.
type TestInputSBOMBundleType string

// TestInputSBOMSourceBundles defines model for TestInputSBOMSourceBundles.
type TestInputSBOMSourceBundles struct {
	Sbom struct {
		// BundleId Bundle id of the SBOM bundle
		BundleId string `json:"bundle_id"`

		// Metadata Metadata of the SBOM bundle
		Metadata struct {
			// LocalFilePath SBOM file path
			LocalFilePath string `json:"local_file_path"`
		} `json:"metadata"`
	} `json:"sbom"`
	Source struct {
		// BundleId Bundle id of the source code bundle
		BundleId string `json:"bundle_id"`

		// Metadata Metadata of the source code bundle
		Metadata struct {
			// LocalFilePath File or directory path for the source code
			LocalFilePath string `json:"local_file_path"`
		} `json:"metadata"`
	} `json:"source"`
	Type TestInputSBOMSourceBundlesType `json:"type"`
}

// TestInputSBOMSourceBundlesType defines model for TestInputSBOMSourceBundles.Type.
type TestInputSBOMSourceBundlesType string

// TestInputScmTarget defines model for TestInputScmTarget.
type TestInputScmTarget struct {
	// TargetId Id of the target to be tested
	TargetId openapi_types.UUID     `json:"target_id"`
	Type     TestInputScmTargetType `json:"type"`

	// Version This target's version, like a git branch, a commit sha, or a Docker image tag
	Version string `json:"version"`
}

// TestInputScmTargetType defines model for TestInputScmTarget.Type.
type TestInputScmTargetType string

// TestInputSourceBundle defines model for TestInputSourceBundle.
type TestInputSourceBundle struct {
	// BundleId A Snyk bundle id
	BundleId string `json:"bundle_id"`

	// Metadata Metadata of the input to be tested
	Metadata struct {
		// CommitId SHA of the commit being tested
		CommitId *string `json:"commit_id,omitempty"`

		// LimitTestToFiles The findings will be limited to a subset of files only.
		LimitTestToFiles *[]string `json:"limit_test_to_files,omitempty"`

		// LocalFilePath This can be a file path or a folder id for IDE
		LocalFilePath string `json:"local_file_path"`

		// RepoUrl The repo URL of the input being tested. This is used for correlating the results of the test with the asset.
		// This will result in stable finding identities for subsequent tests of the same repository.
		RepoUrl *string `json:"repo_url,omitempty"`
	} `json:"metadata"`
	Type TestInputSourceBundleType `json:"type"`
}

// TestInputSourceBundleType defines model for TestInputSourceBundle.Type.
type TestInputSourceBundleType string

// TestInputTarget defines model for TestInputTarget.
type TestInputTarget struct {
	// TargetId Id of the target to be tested
	TargetId openapi_types.UUID  `json:"target_id"`
	Type     TestInputTargetType `json:"type"`

	// Version This target's version, like a git branch, a commit sha, or a Docker image tag
	Version string `json:"version"`
}

// TestInputTargetType defines model for TestInputTarget.Type.
type TestInputTargetType string

// TestInputWorkspace defines model for TestInputWorkspace.
type TestInputWorkspace struct {
	Type TestInputWorkspaceType `json:"type"`

	// WorkspaceId Id of the workspace to be tested
	WorkspaceId openapi_types.UUID `json:"workspace_id"`
}

// TestInputWorkspaceType defines model for TestInputWorkspace.Type.
type TestInputWorkspaceType string

// TestResponse defines model for TestResponse.
type TestResponse struct {
	Data struct {
		// Id The id of the Snyk test
		Id   openapi_types.UUID   `json:"id"`
		Type TestResponseDataType `json:"type"`
	} `json:"data"`
	Jsonapi *externalRef0.JsonApi `json:"jsonapi,omitempty"`
	Links   externalRef0.SelfLink `json:"links"`
}

// TestResponseDataType defines model for TestResponse.Data.Type.
type TestResponseDataType string

// TestResult defines model for TestResult.
type TestResult struct {
	Data struct {
		Attributes TestState `json:"attributes"`

		// Id The id of the test
		Id   openapi_types.UUID `json:"id"`
		Type TestResultDataType `json:"type"`
	} `json:"data"`
	Jsonapi externalRef0.JsonApi  `json:"jsonapi"`
	Links   externalRef0.SelfLink `json:"links"`
}

// TestResultDataType defines model for TestResult.Data.Type.
type TestResultDataType string

// TestState defines model for TestState.
type TestState struct {
	union json.RawMessage
}

// AsTestInputSourceBundle returns the union data inside the TestAttributes_Input as a TestInputSourceBundle
func (t TestAttributes_Input) AsTestInputSourceBundle() (TestInputSourceBundle, error) {
	var body TestInputSourceBundle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputSourceBundle overwrites any union data inside the TestAttributes_Input as the provided TestInputSourceBundle
func (t *TestAttributes_Input) FromTestInputSourceBundle(v TestInputSourceBundle) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputSourceBundle performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputSourceBundle
func (t *TestAttributes_Input) MergeTestInputSourceBundle(v TestInputSourceBundle) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputSBOMBundle returns the union data inside the TestAttributes_Input as a TestInputSBOMBundle
func (t TestAttributes_Input) AsTestInputSBOMBundle() (TestInputSBOMBundle, error) {
	var body TestInputSBOMBundle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputSBOMBundle overwrites any union data inside the TestAttributes_Input as the provided TestInputSBOMBundle
func (t *TestAttributes_Input) FromTestInputSBOMBundle(v TestInputSBOMBundle) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputSBOMBundle performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputSBOMBundle
func (t *TestAttributes_Input) MergeTestInputSBOMBundle(v TestInputSBOMBundle) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputLegacyScmProject returns the union data inside the TestAttributes_Input as a TestInputLegacyScmProject
func (t TestAttributes_Input) AsTestInputLegacyScmProject() (TestInputLegacyScmProject, error) {
	var body TestInputLegacyScmProject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputLegacyScmProject overwrites any union data inside the TestAttributes_Input as the provided TestInputLegacyScmProject
func (t *TestAttributes_Input) FromTestInputLegacyScmProject(v TestInputLegacyScmProject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputLegacyScmProject performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputLegacyScmProject
func (t *TestAttributes_Input) MergeTestInputLegacyScmProject(v TestInputLegacyScmProject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputGitUrlCoordinates returns the union data inside the TestAttributes_Input as a TestInputGitUrlCoordinates
func (t TestAttributes_Input) AsTestInputGitUrlCoordinates() (TestInputGitUrlCoordinates, error) {
	var body TestInputGitUrlCoordinates
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputGitUrlCoordinates overwrites any union data inside the TestAttributes_Input as the provided TestInputGitUrlCoordinates
func (t *TestAttributes_Input) FromTestInputGitUrlCoordinates(v TestInputGitUrlCoordinates) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputGitUrlCoordinates performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputGitUrlCoordinates
func (t *TestAttributes_Input) MergeTestInputGitUrlCoordinates(v TestInputGitUrlCoordinates) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputDiffTarget returns the union data inside the TestAttributes_Input as a TestInputDiffTarget
func (t TestAttributes_Input) AsTestInputDiffTarget() (TestInputDiffTarget, error) {
	var body TestInputDiffTarget
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputDiffTarget overwrites any union data inside the TestAttributes_Input as the provided TestInputDiffTarget
func (t *TestAttributes_Input) FromTestInputDiffTarget(v TestInputDiffTarget) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputDiffTarget performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputDiffTarget
func (t *TestAttributes_Input) MergeTestInputDiffTarget(v TestInputDiffTarget) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputTarget returns the union data inside the TestAttributes_Input as a TestInputTarget
func (t TestAttributes_Input) AsTestInputTarget() (TestInputTarget, error) {
	var body TestInputTarget
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputTarget overwrites any union data inside the TestAttributes_Input as the provided TestInputTarget
func (t *TestAttributes_Input) FromTestInputTarget(v TestInputTarget) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputTarget performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputTarget
func (t *TestAttributes_Input) MergeTestInputTarget(v TestInputTarget) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputScmTarget returns the union data inside the TestAttributes_Input as a TestInputScmTarget
func (t TestAttributes_Input) AsTestInputScmTarget() (TestInputScmTarget, error) {
	var body TestInputScmTarget
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputScmTarget overwrites any union data inside the TestAttributes_Input as the provided TestInputScmTarget
func (t *TestAttributes_Input) FromTestInputScmTarget(v TestInputScmTarget) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputScmTarget performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputScmTarget
func (t *TestAttributes_Input) MergeTestInputScmTarget(v TestInputScmTarget) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputSBOMSourceBundles returns the union data inside the TestAttributes_Input as a TestInputSBOMSourceBundles
func (t TestAttributes_Input) AsTestInputSBOMSourceBundles() (TestInputSBOMSourceBundles, error) {
	var body TestInputSBOMSourceBundles
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputSBOMSourceBundles overwrites any union data inside the TestAttributes_Input as the provided TestInputSBOMSourceBundles
func (t *TestAttributes_Input) FromTestInputSBOMSourceBundles(v TestInputSBOMSourceBundles) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputSBOMSourceBundles performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputSBOMSourceBundles
func (t *TestAttributes_Input) MergeTestInputSBOMSourceBundles(v TestInputSBOMSourceBundles) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInputWorkspace returns the union data inside the TestAttributes_Input as a TestInputWorkspace
func (t TestAttributes_Input) AsTestInputWorkspace() (TestInputWorkspace, error) {
	var body TestInputWorkspace
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInputWorkspace overwrites any union data inside the TestAttributes_Input as the provided TestInputWorkspace
func (t *TestAttributes_Input) FromTestInputWorkspace(v TestInputWorkspace) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInputWorkspace performs a merge with any union data inside the TestAttributes_Input, using the provided TestInputWorkspace
func (t *TestAttributes_Input) MergeTestInputWorkspace(v TestInputWorkspace) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TestAttributes_Input) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TestAttributes_Input) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTestAcceptedState returns the union data inside the TestState as a TestAcceptedState
func (t TestState) AsTestAcceptedState() (TestAcceptedState, error) {
	var body TestAcceptedState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestAcceptedState overwrites any union data inside the TestState as the provided TestAcceptedState
func (t *TestState) FromTestAcceptedState(v TestAcceptedState) error {
	v.Status = "TestAcceptedState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestAcceptedState performs a merge with any union data inside the TestState, using the provided TestAcceptedState
func (t *TestState) MergeTestAcceptedState(v TestAcceptedState) error {
	v.Status = "TestAcceptedState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestInProgressState returns the union data inside the TestState as a TestInProgressState
func (t TestState) AsTestInProgressState() (TestInProgressState, error) {
	var body TestInProgressState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestInProgressState overwrites any union data inside the TestState as the provided TestInProgressState
func (t *TestState) FromTestInProgressState(v TestInProgressState) error {
	v.Status = "TestInProgressState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestInProgressState performs a merge with any union data inside the TestState, using the provided TestInProgressState
func (t *TestState) MergeTestInProgressState(v TestInProgressState) error {
	v.Status = "TestInProgressState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestCompletedState returns the union data inside the TestState as a TestCompletedState
func (t TestState) AsTestCompletedState() (TestCompletedState, error) {
	var body TestCompletedState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestCompletedState overwrites any union data inside the TestState as the provided TestCompletedState
func (t *TestState) FromTestCompletedState(v TestCompletedState) error {
	v.Status = "TestCompletedState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestCompletedState performs a merge with any union data inside the TestState, using the provided TestCompletedState
func (t *TestState) MergeTestCompletedState(v TestCompletedState) error {
	v.Status = "TestCompletedState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTestErrorState returns the union data inside the TestState as a TestErrorState
func (t TestState) AsTestErrorState() (TestErrorState, error) {
	var body TestErrorState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTestErrorState overwrites any union data inside the TestState as the provided TestErrorState
func (t *TestState) FromTestErrorState(v TestErrorState) error {
	v.Status = "TestErrorState"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTestErrorState performs a merge with any union data inside the TestState, using the provided TestErrorState
func (t *TestState) MergeTestErrorState(v TestErrorState) error {
	v.Status = "TestErrorState"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TestState) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TestState) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "TestAcceptedState":
		return t.AsTestAcceptedState()
	case "TestCompletedState":
		return t.AsTestCompletedState()
	case "TestErrorState":
		return t.AsTestErrorState()
	case "TestInProgressState":
		return t.AsTestInProgressState()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TestState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TestState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
