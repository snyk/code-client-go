// Package v20240216 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v20240216

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	externalRef0 "github.com/snyk/code-client-go/internal/workspace/2024-03-12/common"
)

// Defines values for CliTestFlowName.
const (
	CliTest CliTestFlowName = "cli_test"
)

// Defines values for MonitorFlowName.
const (
	Monitor MonitorFlowName = "monitor"
)

// Defines values for PostScanRequestDataType.
const (
	Workspace PostScanRequestDataType = "workspace"
)

// Defines values for ScanJobType.
const (
	ScanJobTypeScanJob ScanJobType = "scan_job"
)

// Defines values for ScanJobBasicAttributesStatus.
const (
	ScanJobBasicAttributesStatusDone       ScanJobBasicAttributesStatus = "done"
	ScanJobBasicAttributesStatusFailed     ScanJobBasicAttributesStatus = "failed"
	ScanJobBasicAttributesStatusInProgress ScanJobBasicAttributesStatus = "in_progress"
	ScanJobBasicAttributesStatusQueued     ScanJobBasicAttributesStatus = "queued"
	ScanJobBasicAttributesStatusTimeout    ScanJobBasicAttributesStatus = "timeout"
	ScanJobBasicAttributesStatusUnknown    ScanJobBasicAttributesStatus = "unknown"
)

// Defines values for ScanJobResultsAttributesStatus.
const (
	ScanJobResultsAttributesStatusDone       ScanJobResultsAttributesStatus = "done"
	ScanJobResultsAttributesStatusFailed     ScanJobResultsAttributesStatus = "failed"
	ScanJobResultsAttributesStatusInProgress ScanJobResultsAttributesStatus = "in_progress"
	ScanJobResultsAttributesStatusQueued     ScanJobResultsAttributesStatus = "queued"
	ScanJobResultsAttributesStatusTimeout    ScanJobResultsAttributesStatus = "timeout"
	ScanJobResultsAttributesStatusUnknown    ScanJobResultsAttributesStatus = "unknown"
)

// Defines values for ScanJobResultsType.
const (
	ScanJobResultsTypeScanJobResults ScanJobResultsType = "scan_job_results"
)

// CliTestFlow defines model for CliTestFlow.
type CliTestFlow struct {
	// Name The flow which the scan is triggered for.
	Name CliTestFlowName `json:"name"`
}

// CliTestFlowName The flow which the scan is triggered for.
type CliTestFlowName string

// Component defines model for Component.
type Component struct {
	// CreatedAt Point in time in which this component was created
	CreatedAt time.Time `json:"created_at"`

	// FindingsUrl Optional URL containing the findings for this component
	FindingsUrl *string `json:"findings_url,omitempty"`

	// Id ID of this component as provided by the scanner
	Id string `json:"id"`

	// Name Human readable name of this component as provided by the scanner
	Name string `json:"name"`

	// Type Identifies the type of this component as provided by the scanner among the ones supported by Snyk
	Type string `json:"type"`
}

// Flow defines model for Flow.
type Flow struct {
	union json.RawMessage
}

// LegacyFlowProperties defines model for LegacyFlowProperties.
type LegacyFlowProperties struct {
	ImportId         openapi_types.UUID `json:"import_id"`
	ImportedTargetId openapi_types.UUID `json:"imported_target_id"`
	TargetReference  *string            `json:"target_reference,omitempty"`
	WorkspaceUrl     string             `json:"workspace_url"`
}

// MonitorFlow defines model for MonitorFlow.
type MonitorFlow struct {
	LegacyProperties *LegacyFlowProperties `json:"legacy_properties,omitempty"`

	// Name The flow which the scan is triggered for.
	Name MonitorFlowName `json:"name"`
}

// MonitorFlowName The flow which the scan is triggered for.
type MonitorFlowName string

// PostScanRequest defines model for PostScanRequest.
type PostScanRequest struct {
	Data struct {
		Attributes struct {
			Flow Flow `json:"flow"`

			// WorkspaceUrl The URI of the workspace to be scanned as returned by the workspace service.
			WorkspaceUrl string `json:"workspace_url"`
		} `json:"attributes"`
		Id   *openapi_types.UUID     `json:"id,omitempty"`
		Type PostScanRequestDataType `json:"type"`
	} `json:"data"`
}

// PostScanRequestDataType defines model for PostScanRequest.Data.Type.
type PostScanRequestDataType string

// ScanJob defines model for ScanJob.
type ScanJob struct {
	Attributes ScanJobBasicAttributes `json:"attributes"`
	Id         openapi_types.UUID     `json:"id"`
	Type       ScanJobType            `json:"type"`
}

// ScanJobType defines model for ScanJob.Type.
type ScanJobType string

// ScanJobBasicAttributes defines model for ScanJobBasicAttributes.
type ScanJobBasicAttributes struct {
	// CreatedAt Point in time in which this job was created
	CreatedAt time.Time `json:"created_at"`

	// Status Defines the completion status of this job. The job is considered finished when: - the status is `done` meaning it successfully completed, although some product lines might have reported errors, or timed out - the status is `failed` meaning it prematurely failed to complete and no product line got a chance to report - the status is `timeout` when the overall job did not manage to complete on time The job is considered in progress when: - the status is either `queued` meaning it hasn't been picked up yet by the orchestrator - the status is `in_progress` meaning it has been picked up by the orchestrator but product lines are still scanning
	Status ScanJobBasicAttributesStatus `json:"status"`
}

// ScanJobBasicAttributesStatus Defines the completion status of this job. The job is considered finished when: - the status is `done` meaning it successfully completed, although some product lines might have reported errors, or timed out - the status is `failed` meaning it prematurely failed to complete and no product line got a chance to report - the status is `timeout` when the overall job did not manage to complete on time The job is considered in progress when: - the status is either `queued` meaning it hasn't been picked up yet by the orchestrator - the status is `in_progress` meaning it has been picked up by the orchestrator but product lines are still scanning
type ScanJobBasicAttributesStatus string

// ScanJobResults defines model for ScanJobResults.
type ScanJobResults struct {
	Attributes struct {
		Components []Component `json:"components"`

		// CreatedAt Point in time in which this job was created
		CreatedAt time.Time `json:"created_at"`

		// Status Defines the completion status of this job. The job is considered finished when: - the status is `done` meaning it successfully completed, although some product lines might have reported errors, or timed out - the status is `failed` meaning it prematurely failed to complete and no product line got a chance to report - the status is `timeout` when the overall job did not manage to complete on time The job is considered in progress when: - the status is either `queued` meaning it hasn't been picked up yet by the orchestrator - the status is `in_progress` meaning it has been picked up by the orchestrator but product lines are still scanning
		Status ScanJobResultsAttributesStatus `json:"status"`
	} `json:"attributes"`
	Id   openapi_types.UUID `json:"id"`
	Type ScanJobResultsType `json:"type"`
}

// ScanJobResultsAttributesStatus Defines the completion status of this job. The job is considered finished when: - the status is `done` meaning it successfully completed, although some product lines might have reported errors, or timed out - the status is `failed` meaning it prematurely failed to complete and no product line got a chance to report - the status is `timeout` when the overall job did not manage to complete on time The job is considered in progress when: - the status is either `queued` meaning it hasn't been picked up yet by the orchestrator - the status is `in_progress` meaning it has been picked up by the orchestrator but product lines are still scanning
type ScanJobResultsAttributesStatus string

// ScanJobResultsType defines model for ScanJobResults.Type.
type ScanJobResultsType string

// ScanResponse defines model for ScanResponse.
type ScanResponse struct {
	Data    ScanJob                `json:"data"`
	Jsonapi *externalRef0.JsonApi  `json:"jsonapi,omitempty"`
	Links   *externalRef0.SelfLink `json:"links,omitempty"`
}

// ScanResultsResponse defines model for ScanResultsResponse.
type ScanResultsResponse struct {
	Data    ScanJobResults         `json:"data"`
	Jsonapi *externalRef0.JsonApi  `json:"jsonapi,omitempty"`
	Links   *externalRef0.SelfLink `json:"links,omitempty"`
}

// AsMonitorFlow returns the union data inside the Flow as a MonitorFlow
func (t Flow) AsMonitorFlow() (MonitorFlow, error) {
	var body MonitorFlow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonitorFlow overwrites any union data inside the Flow as the provided MonitorFlow
func (t *Flow) FromMonitorFlow(v MonitorFlow) error {
	v.Name = "MonitorFlow"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonitorFlow performs a merge with any union data inside the Flow, using the provided MonitorFlow
func (t *Flow) MergeMonitorFlow(v MonitorFlow) error {
	v.Name = "MonitorFlow"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCliTestFlow returns the union data inside the Flow as a CliTestFlow
func (t Flow) AsCliTestFlow() (CliTestFlow, error) {
	var body CliTestFlow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCliTestFlow overwrites any union data inside the Flow as the provided CliTestFlow
func (t *Flow) FromCliTestFlow(v CliTestFlow) error {
	v.Name = "CliTestFlow"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCliTestFlow performs a merge with any union data inside the Flow, using the provided CliTestFlow
func (t *Flow) MergeCliTestFlow(v CliTestFlow) error {
	v.Name = "CliTestFlow"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Flow) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"name"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Flow) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CliTestFlow":
		return t.AsCliTestFlow()
	case "MonitorFlow":
		return t.AsMonitorFlow()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Flow) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Flow) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
