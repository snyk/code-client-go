// Code generated by MockGen. DO NOT EDIT.
// Source: workspace.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v20240312 "github.com/snyk/code-client-go/internal/workspace/2024-03-12"
	v202403120 "github.com/snyk/code-client-go/internal/workspace/2024-03-12/parameters"
)

// MockWorkspace is a mock of Workspace interface.
type MockWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceMockRecorder
}

// MockWorkspaceMockRecorder is the mock recorder for MockWorkspace.
type MockWorkspaceMockRecorder struct {
	mock *MockWorkspace
}

// NewMockWorkspace creates a new mock instance.
func NewMockWorkspace(ctrl *gomock.Controller) *MockWorkspace {
	mock := &MockWorkspace{ctrl: ctrl}
	mock.recorder = &MockWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspace) EXPECT() *MockWorkspaceMockRecorder {
	return m.recorder
}

// CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse mocks base method.
func (m *MockWorkspace) CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx context.Context, orgId v202403120.OrgId, params *v20240312.CreateWorkspaceParams, body v20240312.CreateWorkspaceApplicationVndAPIPlusJSONRequestBody, reqEditors ...v20240312.RequestEditorFn) (*v20240312.CreateWorkspaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, orgId, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*v20240312.CreateWorkspaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse indicates an expected call of CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse.
func (mr *MockWorkspaceMockRecorder) CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse(ctx, orgId, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, orgId, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse", reflect.TypeOf((*MockWorkspace)(nil).CreateWorkspaceWithApplicationVndAPIPlusJSONBodyWithResponse), varargs...)
}

// CreateWorkspaceWithBodyWithResponse mocks base method.
func (m *MockWorkspace) CreateWorkspaceWithBodyWithResponse(ctx context.Context, orgId v202403120.OrgId, params *v20240312.CreateWorkspaceParams, contentType string, body io.Reader, reqEditors ...v20240312.RequestEditorFn) (*v20240312.CreateWorkspaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, orgId, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*v20240312.CreateWorkspaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceWithBodyWithResponse indicates an expected call of CreateWorkspaceWithBodyWithResponse.
func (mr *MockWorkspaceMockRecorder) CreateWorkspaceWithBodyWithResponse(ctx, orgId, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, orgId, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceWithBodyWithResponse", reflect.TypeOf((*MockWorkspace)(nil).CreateWorkspaceWithBodyWithResponse), varargs...)
}
