// Code generated by MockGen. DO NOT EDIT.
// Source: instrumentor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	observability "github.com/snyk/code-client-go/observability"
)

// MockInstrumentor is a mock of Instrumentor interface.
type MockInstrumentor struct {
	ctrl     *gomock.Controller
	recorder *MockInstrumentorMockRecorder
}

// MockInstrumentorMockRecorder is the mock recorder for MockInstrumentor.
type MockInstrumentorMockRecorder struct {
	mock *MockInstrumentor
}

// NewMockInstrumentor creates a new mock instance.
func NewMockInstrumentor(ctrl *gomock.Controller) *MockInstrumentor {
	mock := &MockInstrumentor{ctrl: ctrl}
	mock.recorder = &MockInstrumentorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstrumentor) EXPECT() *MockInstrumentorMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockInstrumentor) Finish(span observability.Span) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish", span)
}

// Finish indicates an expected call of Finish.
func (mr *MockInstrumentorMockRecorder) Finish(span interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockInstrumentor)(nil).Finish), span)
}

// NewTransaction mocks base method.
func (m *MockInstrumentor) NewTransaction(ctx context.Context, txName, operation string) observability.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", ctx, txName, operation)
	ret0, _ := ret[0].(observability.Span)
	return ret0
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockInstrumentorMockRecorder) NewTransaction(ctx, txName, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockInstrumentor)(nil).NewTransaction), ctx, txName, operation)
}

// StartSpan mocks base method.
func (m *MockInstrumentor) StartSpan(ctx context.Context, operation string) observability.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpan", ctx, operation)
	ret0, _ := ret[0].(observability.Span)
	return ret0
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockInstrumentorMockRecorder) StartSpan(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockInstrumentor)(nil).StartSpan), ctx, operation)
}

// MockSpan is a mock of Span interface.
type MockSpan struct {
	ctrl     *gomock.Controller
	recorder *MockSpanMockRecorder
}

// MockSpanMockRecorder is the mock recorder for MockSpan.
type MockSpanMockRecorder struct {
	mock *MockSpan
}

// NewMockSpan creates a new mock instance.
func NewMockSpan(ctrl *gomock.Controller) *MockSpan {
	mock := &MockSpan{ctrl: ctrl}
	mock.recorder = &MockSpanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpan) EXPECT() *MockSpanMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSpan) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSpanMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSpan)(nil).Context))
}

// Finish mocks base method.
func (m *MockSpan) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockSpanMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockSpan)(nil).Finish))
}

// GetDurationMs mocks base method.
func (m *MockSpan) GetDurationMs() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDurationMs")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetDurationMs indicates an expected call of GetDurationMs.
func (mr *MockSpanMockRecorder) GetDurationMs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDurationMs", reflect.TypeOf((*MockSpan)(nil).GetDurationMs))
}

// GetOperation mocks base method.
func (m *MockSpan) GetOperation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockSpanMockRecorder) GetOperation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockSpan)(nil).GetOperation))
}

// GetTraceId mocks base method.
func (m *MockSpan) GetTraceId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceId indicates an expected call of GetTraceId.
func (mr *MockSpanMockRecorder) GetTraceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceId", reflect.TypeOf((*MockSpan)(nil).GetTraceId))
}

// GetTxName mocks base method.
func (m *MockSpan) GetTxName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTxName indicates an expected call of GetTxName.
func (mr *MockSpanMockRecorder) GetTxName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxName", reflect.TypeOf((*MockSpan)(nil).GetTxName))
}

// SetTransactionName mocks base method.
func (m *MockSpan) SetTransactionName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransactionName", name)
}

// SetTransactionName indicates an expected call of SetTransactionName.
func (mr *MockSpanMockRecorder) SetTransactionName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransactionName", reflect.TypeOf((*MockSpan)(nil).SetTransactionName), name)
}

// StartSpan mocks base method.
func (m *MockSpan) StartSpan(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartSpan", ctx)
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockSpanMockRecorder) StartSpan(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockSpan)(nil).StartSpan), ctx)
}
