// Code generated by MockGen. DO NOT EDIT.
// Source: config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// IsFedramp mocks base method.
func (m *MockConfig) IsFedramp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFedramp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFedramp indicates an expected call of IsFedramp.
func (mr *MockConfigMockRecorder) IsFedramp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFedramp", reflect.TypeOf((*MockConfig)(nil).IsFedramp))
}

// Organization mocks base method.
func (m *MockConfig) Organization() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(string)
	return ret0
}

// Organization indicates an expected call of Organization.
func (mr *MockConfigMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockConfig)(nil).Organization))
}

// SnykApi mocks base method.
func (m *MockConfig) SnykApi() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnykApi")
	ret0, _ := ret[0].(string)
	return ret0
}

// SnykApi indicates an expected call of SnykApi.
func (mr *MockConfigMockRecorder) SnykApi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnykApi", reflect.TypeOf((*MockConfig)(nil).SnykApi))
}

// SnykCodeAnalysisTimeout mocks base method.
func (m *MockConfig) SnykCodeAnalysisTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnykCodeAnalysisTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SnykCodeAnalysisTimeout indicates an expected call of SnykCodeAnalysisTimeout.
func (mr *MockConfigMockRecorder) SnykCodeAnalysisTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnykCodeAnalysisTimeout", reflect.TypeOf((*MockConfig)(nil).SnykCodeAnalysisTimeout))
}

// SnykCodeApi mocks base method.
func (m *MockConfig) SnykCodeApi() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnykCodeApi")
	ret0, _ := ret[0].(string)
	return ret0
}

// SnykCodeApi indicates an expected call of SnykCodeApi.
func (mr *MockConfigMockRecorder) SnykCodeApi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnykCodeApi", reflect.TypeOf((*MockConfig)(nil).SnykCodeApi))
}
